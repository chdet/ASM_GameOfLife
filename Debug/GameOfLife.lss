
AVRASM ver. 2.2.7  C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm Sun May 20 21:52:45 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(21): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(22): Including file 'C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\goldef.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(210): Including file 'C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\sim_subroutines.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(211): Including file 'C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\kb_subroutines.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(212): Including file 'C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\ldmatrix_subroutines.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(21): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(22): Including file 'C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\goldef.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(210): Including file 'C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\sim_subroutines.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(211): Including file 'C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\kb_subroutines.inc'
C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\main.asm(212): Including file 'C:\Users\Charles\OneDrive - Université Libre de Bruxelles\ULB\EE MA1\Sensors and Microsystem Electronics\uC\TaskSolutions\GameOfLife\ldmatrix_subroutines.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; GameOfLife.asm
                                 ;
                                 ; Created: 30/04/2018 15:35:18
                                 ; Author : Charles Detemmerman 
                                 ;
                                 ; Registers R0 -> R20 are open for calculation
                                 ; Registers R21,R22,R23,R24,R25 are used for control logic
                                 ; <!> The pointer Y is only used by the screen refresh loop, it cannot be modified anywhere, even if pushed </!>
                                 ; This is voluntary as the refresh loop is entered extremely often and has to remember where the last memory position was
                                 
                                 ; Naming convention: - register names and constants are UPPERCASE
                                 ;					 - memory and flow labels are lowercase
                                 ;					 - subroutines are Capitalized
                                 ;					 - loops are CamelCase
                                 ; Always followed except when it's not
                                 ; Pretty > Functional
                                 ; Best enjoyed in 6pt Comic Sans
                                 ; 100% Gluten Free Code
                                 
                                 .INCLUDE "m328pdef.inc"				; Load addresses of (I/O) registers
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .INCLUDE "goldef.inc"
                                 
                                  * goldef.inc
                                  *
                                  *  Created: 04-05-18 17:50:54
                                  *   Author: Charles
                                  */ 
                                 
                                 .def CUR_BYTE_IDX = R23				; Contains the byte index of the cursor in board 
                                 .def CUR_BITMASK = R24				; Contains the bitmask of the cursor in byte
                                 .def STATE = R25					; Contains program state flags
                                 .def ACTIVE_ROW = R21
                                 .def ROWS_REMAINING = R22			; Contains the number of rows to display before restarting at the first
                                 
                                 ; Timing of the simulation
                                 /*.equ TIMERSTART = 3036			; 1 Hz with 256 prescaler*/
                                 .equ TIMERSTART = 34086				; 2 Hz with 256 prescaler
                                 
                                 ; Timing of the screen refresh
                                 /*.equ SCRSTART = 6;					; 1kHz with 64 prescaler*/
                                 .equ SCRSTART = 131;				; 500Hz with 256 prescaler
                                 
                                 
                                 .equ MATRIX_ROWS = 14
                                 .equ MATRIX_COL = 40
                                 .equ MATRIX_SIZE = MATRIX_ROWS*MATRIX_COL/8
                                 .equ SHFTREG_ROWS = MATRIX_ROWS/2	; Shift_register rows = board_rows/2
                                 
                                 ; Sets the extra space around the matrix to allow interaction near the borders
                                 .equ PADDING = 1							; in bytes
                                 .equ BOARD_ROWS = MATRIX_ROWS + 16*PADDING	; in bits
                                 .equ BOARD_COL = MATRIX_COL + 16*PADDING
                                 .equ BOARD_SIZE = BOARD_ROWS*BOARD_COL/8	; in bytes
                                 
                                 ; State flags
                                 .equ HELD_BIT = 0b10000000
                                 .equ HELD_BIT_IDX = 7
                                 .equ PRESS_BIT = 0b01000000
                                 .equ PRESS_BIT_IDX = 6
                                 
                                 
                                 .macro LDXI
                                 ; Load immediate data memory adress with X
                                 
                                 LDI XL, low(@1)
                                 LDI XH, high(@1)
                                 LD @0,X
                                 .endmacro
                                  
                                 .macro STXI
                                 ; Store to immediate data memory adress with X
                                 LDI XL, low(@0)
                                 LDI XH, high(@0)
                                 ST X,@1
                                 .endmacro
                                 
                                 .macro X2CB
                                 ; Sets the X pointer to the cursor position on the board (NB: not to the local copy)
                                 
                                 LDI XH, high(board)
                                 LDI XL, low(board)
                                 ADD XL, CUR_BYTE_IDX
                                 .endmacro
                                 
                                 .macro T1_PUSHREGS
                                 ; Push the registers used by the Timer 1 interrupt
                                 
                                 PUSH ZH
                                 PUSH ZL
                                 PUSH XH
                                 PUSH XL
                                 PUSH R0
                                 PUSH R2
                                 PUSH R3
                                 PUSH R4
                                 PUSH R5
                                 PUSH R6
                                 PUSH R7
                                 PUSH R8
                                 PUSH R16
                                 PUSH R17
                                 PUSH R18
                                 PUSH R19
                                 LDS R0, SREG
                                 PUSH R0
                                 .endmacro
                                 
                                 .macro T1_POPREGS
                                 POP R0
                                 STS SREG, R0
                                 POP R19
                                 POP R18
                                 POP R17
                                 POP R16
                                 POP R8
                                 POP R7
                                 POP R6
                                 POP R5
                                 POP R4
                                 POP R3
                                 POP R2
                                 POP R0
                                 POP XL
                                 POP XH
                                 POP ZL
                                 POP ZH
                                 
                                 
                                 .dseg
                                 ; Preallocate the board data-memory space at label "board"
000100                           board: .byte BOARD_SIZE
0001d2                           boardcpy: .byte BOARD_SIZE
0002a4                           cur_byte: .byte 1					; Contains the active copy of the byte at the cursor
0002a5                           x_cursor: .byte 1					; Contains the X coordinate of the cursor, simplifies out of bounds detection when padding > 0
0002a6                           y_cursor: .byte 1
                                 .cseg
                                 
                                 .equ board_eol = board+BOARD_SIZE
                                 .equ boardcpy_eol = boardcpy+BOARD_SIZE
                                 .equ matrix_start = PADDING*(BOARD_COL + 1)			; Matrix start at (BOARD_COL*(8*PADDING) + 8)/8
                                 
                                 
                                 
                                 .ORG 0x0000
000000 c020                      RJMP init							; First instruction that is executed by the microcontroller
                                 .ORG 0x001A							; See Datasheet: 12.4 Interrupt Vectors in ATmega328 and ATmega328P
00001a c075                      RJMP Timer1OverflowInterrupt
                                 .ORG 0x0020
000020 c307                      RJMP Timer0OverflowInterrupt
                                 
                                 
                                 ;======================================================================
                                 ;								INIT
                                 ;======================================================================
                                 init:
                                 
                                 ; Configure input pin PB0 (Switch)
000021 9820                      CBI DDRB,0							; Pin PB0 is an input
000022 9a28                      SBI PORTB,0							; Enable the pull-up resistor
                                 
                                 ; Configure output pin PC2
000023 9a3a                      SBI DDRC,2							; Pin PC2 is an output
000024 9a42                      SBI PORTC,2							; Output Vcc => LED1 is turned off!
                                 
                                 ; Configure input pin PD0
000025 9850                      CBI DDRD,0							; Pin PD0 is an input
000026 9a58                      SBI PORTD,0							; Enable the pull-up resistor
                                 
                                 ; Configure input pin PD0
000027 9851                      CBI DDRD,1							; Pin PD1 is an input
000028 9a59                      SBI PORTD,1							; Enable the pull-up resistor
                                 
                                 ; Configure input pin PD0
000029 9852                      CBI DDRD,2							; Pin PD2 is an input
00002a 9a5a                      SBI PORTD,2							; Enable the pull-up resistor
                                 
                                 ; Configure input pin PD0
00002b 9853                      CBI DDRD,3							; Pin PD3 is an input
00002c 9a5b                      SBI PORTD,3							; Enable the pull-up resistor
                                 
                                 ; Configure output pin PC2
00002d 9a57                      SBI DDRD,7							; Pin PD7 is an output
00002e 9a5f                      SBI PORTD,7							; Keyboard row at 1 => Neutral
                                 
                                 ; Configure output pin PC2
00002f 9a56                      SBI DDRD,6							; Pin PD6 is an output
000030 9a5e                      SBI PORTD,6							; Keyboard row at 1 => Neutral
                                 
                                 ; Configure output pin PC2
000031 9a55                      SBI DDRD,5							; Pin PD5 is an output
000032 9a5d                      SBI PORTD,5							; Keyboard row at 1 => Neutral
                                 
                                 ; Configure output pin PC2
000033 9a54                      SBI DDRD,4							; Pin PD4 is an output
000034 9a5c                      SBI PORTD,4							; Keyboard row at 1 => Neutral
                                 
                                 ; Configure output pin PB3 (SBI)
000035 9a23                      SBI DDRB,3							; Pin PB3 is an output
000036 982b                      CBI PORTB,3							; Output GND => SBI at 0
                                 ; Configure output pin PB4 (Shift Reg output & latch control)
000037 9a24                      SBI DDRB,4							; Pin PB4 is an output
000038 982c                      CBI PORTB,4							; Output GND => Output OFF
                                 ; Configure output pin PB5 (Shift Reg Clk)
000039 9a25                      SBI DDRB,5							; Pin PB5 is an output
00003a 982d                      CBI PORTB,5							; Output GND => Clock at 0
                                 
                                 ; Timer setup
                                 
00003b e004                      LDI R16,0b00000100					; Set timer0 (8 bits) prescaler to 64 [00000011] or 256 [00000100]
00003c bd05                      OUT TCCR0B,R16
00003d e803                      LDI R16,SCRSTART
00003e bd06                      OUT TCNT0, R16
                                 
00003f e004                      LDI R16,0b00000100					; Set timer1 (16 bits) prescaler to 256 [00000100]
000040 9300 0081                 STS TCCR1B,R16
000042 e805                      LDI R16,high(TIMERSTART)
000043 e216                      LDI R17,low(TIMERSTART)	
000044 9300 0085                 STS TCNT1H,R16
000046 9310 0084                 STS TCNT1L,R17
                                 
                                 ; Control registers setup
000048 e450                      LDI ACTIVE_ROW,0b01000000			; Stores the current active row index, MSB is the inactive pin
000049 e067                      LDI ROWS_REMAINING, SHFTREG_ROWS	; Number of LED_MATRIX char_array's
00004a e379                      LDI CUR_BYTE_IDX, matrix_start
00004b e880                      LDI CUR_BITMASK, 0b10000000			; Led_matrix origin is lower-right corner (upper-left upside down)
00004c 2799                      CLR STATE
00004d e000                      LDI R16,0b00000000
00004e eaa4
00004f e0b2
000050 930c                      STXI cur_byte, R16
000051 2400                      CLR R0
000052 eaa5
000053 e0b2
000054 920c                      STXI x_cursor, R0
000055 eaa6
000056 e0b2
000057 920c                      STXI y_cursor, R0
                                 
                                 ; Initialize SRAM-memory to 0 in board space
000058 e0f1                      LDI ZH, high(board)
000059 e0e0                      LDI ZL, low(board)
00005a 2400                      CLR R0
00005b 9201                      rst: ST Z+,R0
00005c 3de2                      CPI ZL,low(board_eol)
00005d f7e9                      BRNE rst
                                 
00005e e0f1                      LDI ZH, high(boardcpy)
00005f ede2                      LDI ZL, low(boardcpy)
000060 2400                      CLR R0
000061 9201                      rst2: ST Z+,R0
000062 3ae4                      CPI ZL,low(boardcpy_eol)
000063 f7e9                      BRNE rst2
                                 
000064 d324                      RCALL Load_GOL							; Load the start screen into game memory
                                 
                                 
                                 ; Set the data address at start of led matrix
000065 e0d1                      LDI YH, high(board+matrix_start)		; Data memory adress MSB
000066 e3c9                      LDI YL, low(board+matrix_start)			; LSB
                                 ; Initialize cursor
000067 e800                      LDI R16,0b10000000
000068 8308                      ST Y,R16
                                 
000069 e800                      LDI R16,0b10000000					; Enable global interrupt
00006a bf0f                      OUT SREG,R16
00006b e001                      LDI R16,0b00000001					; Enable timer0 interrupt
00006c 9300 006e                 STS TIMSK0,R16
00006e e000                      LDI R16,0b00000000					; Disable timer1 interrupt
00006f 9300 006f                 STS TIMSK1,R16
                                 
                                 ;======================================================================
                                 ;								MAIN
                                 ;======================================================================
                                 main:
                                 
                                 ; LED MATRIX MANAGEMENT
                                 /*RCALL Print_board*/			; Now done in interrupt
                                 
000071 ef0f                      LDI R16,0xFF					; Wait to avoid button bounce glitches when refreshing screen in interrupt
                                 WaitLoop31:
000072 0000                      	NOP
000073 e218                      	LDI R17,40
                                 	WaitLoop32:
000074 0000                      		NOP
000075 951a                      		DEC R17
000076 f7e9                      		BRNE WaitLoop32
000077 950a                      	DEC R16
000078 f7c9                      	BRNE WaitLoop31
                                 
000079 b003                      IN R0,PINB							; Get value of PINB
00007a fa00                      BST R0,0							; Copy PB2 (bit 0 of PINB) to the T flag
                                 
                                 									; The switch is high if the T flag is set
00007b f02e                      BRTS run_mode						; Branch if the T flag is set
                                 
                                 edit_mode:
                                 ; KEYBOARD MANAGEMENT
00007c e000                      LDI R16,0b00000000					; Disable timer1 interrupt
00007d 9300 006f                 STS TIMSK1,R16
00007f d161                      RCALL Poll_kb				
000080 cff0                      RJMP main
                                 
                                 
                                 run_mode:
000081 9100 006f                 LDS R16,TIMSK1
000083 fb00                      BST R16,0
000084 f366                      BRTS main						; Branch if the T flag is set
000085 eaa4
000086 e0b2
000087 910c                      LDXI R16, cur_byte
000088 e0b1
000089 e0a0
00008a 0fa7                      X2CB
00008b 930c                      ST X,R16
00008c e001                      LDI R16,0b00000001					; Enable timer1 interrupt
00008d 9300 006f                 STS TIMSK1,R16
00008f cfe1                      RJMP main							; Create an infinite loop
                                 
                                 
                                 ;======================================================================
                                 ;							SUBROUTINES
                                 ;======================================================================
                                 ; Strange error can happen where assembler can't detect the subroutine at build, just cut and paste the include a few times it should work
                                 .INCLUDE "sim_subroutines.inc"
                                 
                                  * sim_subroutines.inc
                                  *
                                  *  Created: 09-05-18 17:22:45
                                  *   Author: Charles
                                  */ 
                                  ; Used registers: R0,R2,R3,R4,R5,R6,R7,R8,R16,R17,R18,R19, X, Y
                                 
                                 
                                 .def COORD_X = R2
                                 .def COORD_Y = R3
                                 .def NEIGHBOURS = R19
                                 .def BITMASK = R4
                                 .def IDX = R7
                                 Timer1OverflowInterrupt:
000090 93ff
000091 93ef
000092 93bf
000093 93af
000094 920f
000095 922f
000096 923f
000097 924f
000098 925f
000099 926f
00009a 927f
00009b 928f
00009c 930f
00009d 931f
00009e 932f
00009f 933f
0000a0 9000 003f
0000a2 920f                      	T1_PUSHREGS						; Push the registers that will be used, which is quite a few
0000a3 9478                      	BSET 7							; Re-enable global interrupt
                                 
                                 
0000a4 9a32                      	SBI PINC,2						; Toggle LED2
                                 
0000a5 e0e0                      	LDI ZL, low(board)
0000a6 e0f1                      	LDI ZH, high(board)
0000a7 2422                      	CLR COORD_X						; Used to avoid compare operations with addresses, which use words (less straightforward)
0000a8 2433                      	CLR COORD_Y
0000a9 2733                      	CLR NEIGHBOURS					; NEIGHBOURS register is used to count the number of live neighbours of a cell
0000aa 2477                      	CLR IDX							; The index is used to locate the correct byte when copying to boardcpy
0000ab e800                      	LDI R16, 0b10000000
0000ac 2e40                      	MOV BITMASK, R16
                                 
                                 
0000ad ed02                      	LDI R16,BOARD_SIZE				; Iterate through the entire board, not only the visible space
0000ae 2e50                      	MOV R5,R16
                                 	ColumnLoop3:
0000af 8120                      		LD R18,Z					; Indirect load from (Z)
0000b0 e008                      		LDI R16,8
0000b1 2e60                      		MOV R6,R16
0000b2 94f8                      		BCLR 7						; Disable global interrupt to avoid glitch with led refresh
                                 		DataLoop3:					; Loading one byte
0000b3 fd27                      			SBRC R18,7				; bit check
0000b4 c002                      			RJMP PC+3
0000b5 d03f                      				RCALL Check_dead_cell
0000b6 c001                      				RJMP PC+2
0000b7 d05c                      			RCALL Check_live_cell
0000b8 0f22                      			LSL R18					; logical shift left
0000b9 9423                      			INC COORD_X
0000ba 2d02                      			MOV R16, COORD_X
0000bb 3308                      			CPI R16, BOARD_COL		; Check if new row
0000bc f411                      			BRNE PC+3
0000bd 9433                      				INC COORD_Y
0000be 2422                      				CLR COORD_X
0000bf 9446                      			LSR BITMASK
0000c0 2733                      			CLR NEIGHBOURS
0000c1 946a                      			DEC R6
0000c2 f781                      			BRNE DataLoop3
0000c3 9478                      		BSET 7							; Re-enable global interrupt
0000c4 9631                      		ADIW Z, 1						; Increment Z
0000c5 9473                      		INC IDX
0000c6 e800                      		LDI R16, 0b10000000
0000c7 2e40                      		MOV BITMASK, R16				; Reset bitmask
0000c8 945a                      		DEC R5
0000c9 f729                      		BRNE ColumnLoop3
                                 
                                 
0000ca e0e0                      	LDI ZL, low(board)
0000cb e0f1                      	LDI ZH, high(board)
0000cc eda2                      	LDI XL, low(boardcpy)
0000cd e0b1                      	LDI XH, high(boardcpy)
                                 
                                 	Boardcpy_to_Board:
0000ce 912d                      	LD R18,X+
0000cf 9321                      	ST Z+, R18
0000d0 3de2                      	CPI ZL, low(board_eol)
0000d1 f7e1                      	BRNE Boardcpy_to_Board
0000d2 30f1                      	CPI ZH, high(board_eol)
0000d3 f7d1                      	BRNE Boardcpy_to_Board
                                 
                                 	;Update cursor_byte	
0000d4 e0b1
0000d5 e0a0
0000d6 0fa7                      	X2CB
0000d7 910c                      	LD R16, X
0000d8 eaa4
0000d9 e0b2
0000da 930c                      	STXI cur_byte, R16
                                 
                                 	
0000db e805                      	LDI R16,high(TIMERSTART)				; Reset Timer 1 counter
0000dc e216                      	LDI R17,low(TIMERSTART)
0000dd 9300 0085                 	STS TCNT1H,R16
0000df 9310 0084                 	STS TCNT1L,R17
0000e1 900f
0000e2 9200 003f
0000e4 913f
0000e5 912f
0000e6 911f
0000e7 910f
0000e8 908f
0000e9 907f
0000ea 906f
0000eb 905f
0000ec 904f
0000ed 903f
0000ee 902f
0000ef 900f
0000f0 91af
0000f1 91bf
0000f2 91ef
0000f3 91ff                      	T1_POPREGS
0000f4 9518                      	RETI
                                 
                                 Check_dead_cell:
0000f5 d04c                      	RCALL TestYplus
0000f6 d03e                      	RCALL TestYminus
0000f7 d06c                      	RCALL TestXplus
0000f8 d057                      	RCALL TestXminus
0000f9 d0b3                      	RCALL TestXplusYminus
0000fa d0cc                      	RCALL TestXminusYplus
0000fb d096                      	RCALL TestXYplus				; This section can be optimized by doing checks every 3 tests
0000fc d07c                      	RCALL TestXYminus
0000fd 3033                      	CPI NEIGHBOURS, 3
0000fe f449                      	BRNE stop_dc_chk
                                 			; Set cell to 1 in board copy
0000ff eda2                      			LDI XL, low(boardcpy)
000100 e0b1                      			LDI XH, high(boardcpy)
000101 0da7                      			ADD XL,IDX
000102 2400                      			CLR R0
000103 1db0                      			ADC XH,R0				; Add with potential carry of previous operation
000104 910c                      			LD R16, X
000105 2904                      			OR R16, BITMASK
000106 930c                      			ST X, R16
000107 9508                      			RET
                                 	stop_dc_chk: 
                                 	; Set cell to 0 in board copy
000108 eda2                      	LDI XL, low(boardcpy)
000109 e0b1                      	LDI XH, high(boardcpy)
00010a 0da7                      	ADD XL,IDX
00010b 2400                      	CLR R0
00010c 1db0                      	ADC XH,R0						; Add with potential carry of previous operation
00010d 910c                      	LD R16, X
00010e 2c84                      	MOV R8, BITMASK
00010f ef1f                      	LDI R17, 0xFF
000110 2681                      	EOR R8, R17						; XOR(R8,0xFF) = NOT(R8)
000111 2108                      	AND R16, R8
000112 930c                      	ST X, R16
000113 9508                      	RET
                                 
                                 Check_live_cell:
000114 d02d                      	RCALL TestYplus
000115 d01f                      	RCALL TestYminus
000116 d04d                      	RCALL TestXplus
000117 d038                      	RCALL TestXminus
000118 d094                      	RCALL TestXplusYminus
000119 d0ad                      	RCALL TestXminusYplus
00011a d077                      	RCALL TestXYplus
00011b d05d                      	RCALL TestXYminus
00011c 3032                      	CPI NEIGHBOURS, 2
00011d f058                      	BRLO stop_lc_chk
00011e 3034                      		CPI NEIGHBOURS, 4			; Zero counts as positive so testing for 3 neighbours with BRPL is CPI 4
00011f f44a                      		BRPL stop_lc_chk
                                 			; Set cell to 1 in board copy
000120 eda2                      			LDI XL, low(boardcpy)
000121 e0b1                      			LDI XH, high(boardcpy)
000122 0da7                      			ADD XL,IDX
000123 2400                      			CLR R0
000124 1db0                      			ADC XH,R0				; Add with potential carry of previous operation
000125 910c                      			LD R16, X
000126 2904                      			OR R16, BITMASK
000127 930c                      			ST X, R16
000128 9508                      			RET
                                 	stop_lc_chk:
                                 	; Set cell to 0 in board copy
000129 eda2                      	LDI XL, low(boardcpy)
00012a e0b1                      	LDI XH, high(boardcpy)
00012b 0da7                      	ADD XL,IDX
00012c 2400                      	CLR R0
00012d 1db0                      	ADC XH,R0						; Add with potential carry of previous operation
00012e 910c                      	LD R16, X
00012f 2c84                      	MOV R8, BITMASK
000130 ef1f                      	LDI R17, 0xFF
000131 2681                      	EOR R8, R17						; XOR(R8,0xFF) = NOT(R8)
000132 2108                      	AND R16, R8
000133 930c                      	ST X, R16
000134 9508                      	RET
                                 
                                 TestYminus:
000135 2d03                      	MOV R16, COORD_Y
000136 5001                      	SUBI R16, 1
000137 f40a                      	BRPL positive_Yminus
000138 9508                      		RET							; Negative Y indicates cell is outside board <-> dead cell
                                 	positive_Yminus:
000139 2fae                      	MOV XL, ZL
00013a 2fbf                      	MOV XH, ZH
00013b 9717                      	SBIW X, (5+2*PADDING)
00013c 910c                      	LD R16, X
00013d 2104                      	AND R16, BITMASK
00013e f409                      	BRNE liveYminus
00013f 9508                      		RET
000140 9533                      	liveYminus: INC NEIGHBOURS
000141 9508                      	RET
                                 
                                 TestYplus:
000142 2d03                      	MOV R16, COORD_Y
000143 9503                      	INC R16
000144 310e                      	CPI R16, BOARD_ROWS
000145 f409                      	BRNE bounded_Yplus
000146 9508                      		RET							; Y+ > BOARD_ROWS indicates cell is outside board <-> dead cell
                                 	bounded_Yplus:
000147 2fae                      	MOV XL, ZL
000148 2fbf                      	MOV XH, ZH
000149 9617                      	ADIW X, (5+2*PADDING)
00014a 910c                      	LD R16, X
00014b 2104                      	AND R16, BITMASK
00014c f409                      	BRNE liveYplus
00014d 9508                      		RET
00014e 9533                      	liveYplus: INC NEIGHBOURS
00014f 9508                      	RET
                                 
                                 TestXminus:
000150 2d02                      	MOV R16, COORD_X
000151 5001                      	SUBI R16, 1
000152 f40a                      	BRPL positive_Xminus
000153 9508                      		RET							; Negative X indicates cell is outside board <-> dead cell
                                 	positive_Xminus:
000154 2fae                      	MOV XL, ZL
000155 2fbf                      	MOV XH, ZH
000156 2d04                      	MOV R16, BITMASK
000157 0f00                      	LSL R16
000158 f429                      	BRNE same_byte1
000159 9711                      		SBIW X, 1
00015a 911c                      		LD R17, X
00015b 7011                      		ANDI R17, 0b00000001
00015c f429                      		BRNE liveXminus
00015d 9508                      			RET
                                 	same_byte1:
00015e 911c                      	LD R17, X
00015f 2310                      	AND R17, R16
000160 f409                      	BRNE liveXminus
000161 9508                      		RET
000162 9533                      	liveXminus: INC NEIGHBOURS
000163 9508                      	RET
                                 
                                 TestXplus:
000164 2d02                      	MOV R16, COORD_X
000165 9503                      	INC R16
000166 3308                      	CPI R16, BOARD_COL
000167 f409                      	BRNE bounded_Xplus
000168 9508                      		RET							; X+ > BOARD_COL indicates cell is outside board <-> dead cell
                                 	bounded_Xplus:
000169 2fae                      	MOV XL, ZL
00016a 2fbf                      	MOV XH, ZH
00016b 2d04                      	MOV R16, BITMASK
00016c 9506                      	LSR R16
00016d f429                      	BRNE same_byte2
00016e 9611                      		ADIW X, 1
00016f 911c                      		LD R17, X
000170 7810                      		ANDI R17, 0b10000000
000171 f429                      		BRNE liveXplus
000172 9508                      			RET
                                 	same_byte2:
000173 911c                      	LD R17, X
000174 2310                      	AND R17, R16
000175 f409                      	BRNE liveXplus
000176 9508                      		RET
000177 9533                      	liveXplus: INC NEIGHBOURS
000178 9508                      	RET
                                 
                                 TestXYminus:
000179 2d02                      	MOV R16, COORD_X
00017a 2d13                      	MOV R17, COORD_Y 
00017b 5001                      	SUBI R16, 1
00017c f40a                      	BRPL PC+2
00017d 9508                      		RET							; Negative X indicates cell is outside board <-> dead cell
00017e 5011                      	SUBI R17, 1
00017f f40a                      	BRPL positive_XYminus
000180 9508                      		RET							; Negative Y indicates cell is outside board <-> dead cell
                                 	positive_XYminus:
000181 2fae                      	MOV XL, ZL
000182 2fbf                      	MOV XH, ZH
000183 9717                      	SBIW X, (5+2*PADDING)
000184 2d04                      	MOV R16, BITMASK
000185 0f00                      	LSL R16
000186 f429                      	BRNE same_Xbyte
000187 9711                      		SBIW X, 1
000188 911c                      		LD R17, X
000189 7011                      		ANDI R17, 0b00000001
00018a f6b9                      		BRNE liveXminus
00018b 9508                      			RET
                                 	same_Xbyte:
00018c 911c                      	LD R17, X
00018d 2310                      	AND R17, R16
00018e f409                      	BRNE liveXYminus
00018f 9508                      		RET
000190 9533                      	liveXYminus: INC NEIGHBOURS
000191 9508                      	RET
                                 
                                 TestXYplus:
000192 2d02                      	MOV R16, COORD_X
000193 2d13                      	MOV R17, COORD_Y 
000194 9513                      	INC R17
000195 311e                      	CPI R17, BOARD_ROWS
000196 f409                      	BRNE PC+2
000197 9508                      		RET							; Y+ > BOARD_ROWS indicates cell is outside board <-> dead cell
000198 9503                      	INC R16
000199 3308                      	CPI R16,BOARD_COL
00019a f409                      	BRNE bounded_XYplus
00019b 9508                      		RET							; X+ > BOARD_COL indicates cell is outside board <-> dead cell
                                 	bounded_XYplus:
00019c 2fae                      	MOV XL, ZL
00019d 2fbf                      	MOV XH, ZH
00019e 9617                      	ADIW X, (5+2*PADDING)
00019f 2d04                      	MOV R16, BITMASK
0001a0 9506                      	LSR R16
0001a1 f429                      	BRNE same_Xbyte4
0001a2 9611                      		ADIW X, 1
0001a3 911c                      		LD R17, X
0001a4 7810                      		ANDI R17, 0b10000000
0001a5 f429                      		BRNE liveXYplus
0001a6 9508                      			RET
                                 	same_Xbyte4:
0001a7 911c                      	LD R17, X
0001a8 2310                      	AND R17, R16
0001a9 f409                      	BRNE liveXYplus
0001aa 9508                      		RET
0001ab 9533                      	liveXYplus: INC NEIGHBOURS
0001ac 9508                      	RET
                                 
                                 TestXplusYminus:
0001ad 2d02                      	MOV R16, COORD_X
0001ae 2d13                      	MOV R17, COORD_Y 
0001af 9503                      	INC R16
0001b0 3308                      	CPI R16, BOARD_COL
0001b1 f409                      	BRNE PC+2
0001b2 9508                      		RET							; X+ > BOARD_COL indicates cell is outside board <-> dead cell
0001b3 5011                      	SUBI R17, 1
0001b4 f40a                      	BRPL bounded_XplusYminus
0001b5 9508                      		RET							; Negative Y indicates cell is outside board <-> dead cell
                                 	bounded_XplusYminus:
0001b6 2fae                      	MOV XL, ZL
0001b7 2fbf                      	MOV XH, ZH
0001b8 9717                      	SBIW X, (5+2*PADDING)
0001b9 2d04                      	MOV R16, BITMASK
0001ba 9506                      	LSR R16
0001bb f429                      	BRNE same_Xbyte2
0001bc 9611                      		ADIW X, 1
0001bd 911c                      		LD R17, X
0001be 7810                      		ANDI R17, 0b10000000
0001bf f429                      		BRNE liveXplusYminus
0001c0 9508                      			RET
                                 	same_Xbyte2:
0001c1 911c                      	LD R17, X
0001c2 2310                      	AND R17, R16
0001c3 f409                      	BRNE liveXplusYminus
0001c4 9508                      		RET
0001c5 9533                      	liveXplusYminus: INC NEIGHBOURS
0001c6 9508                      	RET
                                 
                                 TestXminusYplus:
0001c7 2d02                      	MOV R16, COORD_X
0001c8 2d13                      	MOV R17, COORD_Y 
0001c9 9513                      	INC R17
0001ca 311e                      	CPI R17, BOARD_ROWS
0001cb f409                      	BRNE PC+2
0001cc 9508                      		RET							; Y+ > BOARD_ROWS indicates cell is outside board <-> dead cell
0001cd 5001                      	SUBI R16, 1
0001ce f40a                      	BRPL bounded_XminusYplus
0001cf 9508                      		RET							; Negative X indicates cell is outside board <-> dead cell
                                 	bounded_XminusYplus:
0001d0 2fae                      	MOV XL, ZL
0001d1 2fbf                      	MOV XH, ZH
0001d2 9617                      	ADIW X, (5+2*PADDING)
0001d3 2d04                      	MOV R16, BITMASK
0001d4 0f00                      	LSL R16
0001d5 f429                      	BRNE same_Xbyte3
0001d6 9711                      		SBIW X, 1
0001d7 911c                      		LD R17, X
0001d8 7011                      		ANDI R17, 0b00000001
0001d9 f429                      		BRNE liveXminusYplus
0001da 9508                      			RET
                                 	same_Xbyte3:
0001db 911c                      	LD R17, X
0001dc 2310                      	AND R17, R16
0001dd f409                      	BRNE liveXminusYplus
0001de 9508                      		RET
0001df 9533                      	liveXminusYplus: INC NEIGHBOURS
0001e0 9508                      	RET
                                 
                                 .undef COORD_X
                                 .undef COORD_Y
                                 .undef NEIGHBOURS
                                 .undef BITMASK
                                 .INCLUDE "kb_subroutines.inc"
                                 
                                  * kb_subroutines.inc
                                  *
                                  *  Created: 04-05-18 22:36:26
                                  *   Author: Charles
                                  */ 
                                 
                                 Poll_kb:
                                 	 ;Neutralize inactive rows
0001e1 9a5e                      	SBI PORTD,6
0001e2 9a5d                      	SBI PORTD,5
0001e3 9a5c                      	SBI PORTD,4
                                 
0001e4 779f                      	CBR STATE,HELD_BIT			; Clear HELB_DBIT to allow button hold test
                                 
                                 	; Send a 0 to keyboard row => Active
0001e5 985f                      	CBI PORTD,7
0001e6 0000                      	NOP
0001e7 9b48                      	SBIS PIND,0
0001e8 0000                      	NOP								; Buttons F->7
0001e9 9b49                      	SBIS PIND,1
0001ea d117                      	RCALL Load_squad
0001eb 9b4a                      	SBIS PIND,2
0001ec d105                      	RCALL Load_gun
0001ed 9b4b                      	SBIS PIND,3
0001ee d0f3                      	RCALL Load_pulsar
0001ef 9a5f                      	SBI PORTD,7
                                 
0001f0 985e                      	CBI PORTD,6
0001f1 0000                      	NOP
0001f2 9b48                      	SBIS PIND,0
0001f3 0000                      	NOP								; Buttons E->4
0001f4 9b49                      	SBIS PIND,1
0001f5 0000                      	NOP
0001f6 9b4a                      	SBIS PIND,2
0001f7 d01c                      	RCALL Up
0001f8 9b4b                      	SBIS PIND,3
0001f9 0000                      	NOP
0001fa 9a5e                      	SBI PORTD,6
                                 
0001fb 985d                      	CBI PORTD,5
0001fc 0000                      	NOP
0001fd 9b48                      	SBIS PIND,0
0001fe 0000                      	NOP								; Buttons D->1
0001ff 9b49                      	SBIS PIND,1
000200 d0a2                      	RCALL Right
000201 9b4a                      	SBIS PIND,2
000202 d0c7                      	RCALL Set_cell
000203 9b4b                      	SBIS PIND,3
000204 d078                      	RCALL Left
000205 9a5d                      	SBI PORTD,5
                                 
000206 985c                      	CBI PORTD,4
000207 0000                      	NOP
000208 9b48                      	SBIS PIND,0
000209 0000                      	NOP								; Buttons C->A
00020a 9b49                      	SBIS PIND,1
00020b 0000                      	NOP
00020c 9b4a                      	SBIS PIND,2
00020d d03b                      	RCALL Down
00020e 9b4b                      	SBIS PIND,3
00020f d102                      	RCALL Clear
000210 9a5c                      	SBI PORTD,4
                                 
000211 ff97                      	SBRS STATE,HELD_BIT_IDX		; Check if a button is being held
000212 7b9f                      	CBR STATE,PRESS_BIT			; Clear the PRESS_BIT, the button can now be pressed again
000213 9508                      	RET
                                 
                                 Up:
000214 6890                      	SBR STATE,HELD_BIT 		; Indicate the button is being held
000215 ff96                      	SBRS STATE,PRESS_BIT_IDX
000216 c001                      		RJMP PC+2
000217 9508                      		RET						; Return if the T-flag is set
000218 6490                      	SBR STATE,PRESS_BIT		; Set the Press-flag, indicating a button was pressed
                                 
                                 	;Out-of-bounds handling
000219 eaa6
00021a e0b2
00021b 912c                      	LDXI R18, y_cursor
00021c 302d                      	CPI R18, MATRIX_ROWS-1
00021d f0b0                      	BRLO go_up
                                 		; Entered if the cursor is out of bounds
00021e 2722                      		CLR R18
00021f 932c                      		ST X, R18									; Set the new y cursor coordinate
000220 2f07                      		MOV R16, CUR_BYTE_IDX
000221 550b                      		SUBI R16, (MATRIX_ROWS-1)*(5+2*PADDING)		; Wrap around the visible board space
000222 eaa4
000223 e0b2
000224 911c                      		LDXI R17, cur_byte							
000225 e0b1
000226 e0a0
000227 0fa7                      		X2CB
000228 931c                      		ST X, R17									; Restore the previous cursor byte
000229 2f70                      		MOV CUR_BYTE_IDX, R16						; Set the new cursor byte index
00022a 97d1                      		SBIW X, MATRIX_ROWS/2*(5+2*PADDING)			; Move the pointer position
00022b 979a                      		SBIW X, MATRIX_ROWS/2*(5+2*PADDING-1)		; In two steps as one step is out of range for SBIW
00022c 911c                      		LD R17,X									; Load new cursor byte
00022d 2f01                      		MOV R16, R17
00022e 2b08                      		OR R16, CUR_BITMASK			; Sets the value at current bit position to 1
00022f 930c                      		ST X, R16
000230 eaa4
000231 e0b2
000232 931c                      		STXI cur_byte, R17							; Set new cursor byte copy
000233 9508                      		RET
                                 	; What follows is essentially the same as the indented block but for in-bounds operation
                                 	go_up:
000234 9523                      	INC R18
000235 932c                      	ST X, R18
000236 2f07                      	MOV R16, CUR_BYTE_IDX
000237 5f09                      	SUBI R16, -(5+2*PADDING)
000238 eaa4
000239 e0b2
00023a 911c                      	LDXI R17, cur_byte			; Load cursor byte to R17
00023b e0b1
00023c e0a0
00023d 0fa7                      	X2CB						; Set X register to cursor byte position
00023e 931c                      	ST X, R17
00023f 2f70                      	MOV CUR_BYTE_IDX, R16
000240 9617                      	ADIW X, (5+2*PADDING)
000241 911c                      	LD R17,X
000242 2f01                      	MOV R16, R17
000243 2b08                      	OR R16, CUR_BITMASK			; Sets the value at current bit position to 1
000244 930c                      	ST X, R16
000245 eaa4
000246 e0b2
000247 931c                      	STXI cur_byte, R17
000248 9508                      	RET
                                 
                                 Down:
000249 6890                      	SBR STATE,HELD_BIT 		; Indicate the button is being held
00024a ff96                      	SBRS STATE,PRESS_BIT_IDX
00024b c001                      		RJMP PC+2
00024c 9508                      		RET						; Return if the Press-flag is set
00024d 6490                      	SBR STATE,PRESS_BIT		; Set the Press-flag, indicating a button was pressed
                                 
                                 	;Out-of-bounds handling
00024e eaa6
00024f e0b2
000250 912c                      	LDXI R18, y_cursor
000251 952a                      	DEC R18
000252 f4b2                      	BRPL go_down
000253 e02d                      		LDI R18, MATRIX_ROWS-1
000254 932c                      		ST X, R18
000255 2f07                      		MOV R16, CUR_BYTE_IDX
000256 5a05                      		SUBI R16, -(MATRIX_ROWS-1)*(5+2*PADDING)
000257 eaa4
000258 e0b2
000259 911c                      		LDXI R17, cur_byte
00025a e0b1
00025b e0a0
00025c 0fa7                      		X2CB
00025d 931c                      		ST X, R17
00025e 2f70                      		MOV CUR_BYTE_IDX, R16
00025f 96d1                      		ADIW X, MATRIX_ROWS/2*(5+2*PADDING)
000260 969a                      		ADIW X, MATRIX_ROWS/2*(5+2*PADDING-1)
000261 911c                      		LD R17,X
000262 2f01                      		MOV R16, R17
000263 2b08                      		OR R16, CUR_BITMASK			; Sets the value at current bit position to 1
000264 930c                      		ST X, R16
000265 eaa4
000266 e0b2
000267 931c                      		STXI cur_byte, R17
000268 9508                      		RET
                                 
                                 	go_down:
000269 932c                      	ST X, R18
00026a 2f07                      	MOV R16, CUR_BYTE_IDX
00026b 5007                      	SUBI R16, (5+2*PADDING)
00026c eaa4
00026d e0b2
00026e 911c                      	LDXI R17, cur_byte
00026f e0b1
000270 e0a0
000271 0fa7                      	X2CB
000272 931c                      	ST X, R17
000273 2f70                      	MOV CUR_BYTE_IDX, R16
000274 9717                      	SBIW X, (5+2*PADDING)
000275 911c                      	LD R17,X
000276 2f01                      	MOV R16, R17
000277 2b08                      	OR R16, CUR_BITMASK			; Sets the value at current bit position to 1
000278 930c                      	ST X, R16
000279 eaa4
00027a e0b2
00027b 931c                      	STXI cur_byte, R17
00027c 9508                      	RET
                                 
                                 Left:
00027d 6890                      	SBR STATE,HELD_BIT 		; Indicate the button is being held
00027e ff96                      	SBRS STATE,PRESS_BIT_IDX
00027f c001                      		RJMP PC+2
000280 9508                      		RET
000281 6490                      	SBR STATE,PRESS_BIT
000282 eaa5
000283 e0b2
000284 912c                      	LDXI R18, x_cursor
000285 9523                      	INC R18
000286 eaa4
000287 e0b2
000288 910c                      	LDXI R16, cur_byte
000289 e0b1
00028a e0a0
00028b 0fa7                      	X2CB						; Set X register to cursor byte position
00028c 9586                      	LSR CUR_BITMASK				; Shift the bitmask to the new cursor position
00028d f479                      	BRNE update_board
                                 		; Entered if the cursor is in a new byte
00028e 930d                      		ST X+, R16				; Restore the previous cursor byte and increment X
00028f 9573                      		INC CUR_BYTE_IDX
000290 3228                      		CPI R18, MATRIX_COL		; Out-of-bounds handling
000291 f018                      		BRLO go_left
000292 2722                      			CLR R18
000293 5075                      			SUBI CUR_BYTE_IDX, 5
000294 9715                      			SBIW X, 5
                                 		go_left:
000295 910c                      		LD R16, X				; Load the new cursor byte
000296 eaa4
000297 e0b2
000298 930c                      		STXI cur_byte, R16		; Set the new cursor byte copy
000299 e0b1
00029a e0a0
00029b 0fa7                      		X2CB
00029c e880                      		LDI CUR_BITMASK, 0b10000000
                                 	update_board:
00029d 2b08                      	OR R16, CUR_BITMASK			; Sets the value at current bit position to 1
00029e 930c                      	ST X, R16
00029f eaa5
0002a0 e0b2
0002a1 932c                      	STXI x_cursor,R18			; Set the new x cursor coordinate
0002a2 9508                      	RET
                                 
                                 Right:
0002a3 6890                      	SBR STATE,HELD_BIT 		; Indicate the button is being held
0002a4 ff96                      	SBRS STATE,PRESS_BIT_IDX
0002a5 c001                      		RJMP PC+2
0002a6 9508                      		RET	
0002a7 6490                      	SBR STATE,PRESS_BIT
0002a8 eaa5
0002a9 e0b2
0002aa 912c                      	LDXI R18, x_cursor
0002ab 952a                      	DEC R18
0002ac eaa4
0002ad e0b2
0002ae 910c                      	LDXI R16, cur_byte
0002af e0b1
0002b0 e0a0
0002b1 0fa7                      	X2CB						; Set X register to cursor byte position
0002b2 0f88                      	LSL CUR_BITMASK
0002b3 f481                      	BRNE update_board2
0002b4 930c                      		ST X, R16
0002b5 9711                      		SBIW X, 1
0002b6 957a                      		DEC CUR_BYTE_IDX
0002b7 3020                      		CPI R18, 0
0002b8 f41a                      		BRPL go_right
0002b9 e227                      			LDI R18, MATRIX_COL-1
0002ba 5f7b                      			SUBI CUR_BYTE_IDX, -5
0002bb 9615                      			ADIW X, 5
                                 		go_right:
0002bc 910c                      		LD R16, X
0002bd eaa4
0002be e0b2
0002bf 930c                      		STXI cur_byte, R16
0002c0 e0b1
0002c1 e0a0
0002c2 0fa7                      		X2CB
0002c3 e081                      		LDI CUR_BITMASK, 0b00000001
                                 	update_board2:
0002c4 2b08                      	OR R16, CUR_BITMASK			; Sets the value at current bit position to 1
0002c5 930c                      	ST X, R16
0002c6 eaa5
0002c7 e0b2
0002c8 932c                      	STXI x_cursor,R18
0002c9 9508                      	RET
                                 
                                 Set_cell:
0002ca 6890                      	SBR STATE,HELD_BIT 		; Indicate the button is being held
0002cb ff96                      	SBRS STATE,PRESS_BIT_IDX
0002cc c001                      		RJMP PC+2
0002cd 9508                      		RET
0002ce 6490                      	SBR STATE,PRESS_BIT	
0002cf eaa4
0002d0 e0b2
0002d1 912c                      	LDXI R18, cur_byte
0002d2 2f02                      	MOV R16, R18
0002d3 2308                      	AND R16, CUR_BITMASK
0002d4 f041                      	BREQ set_bit
                                 	unset_bit:
0002d5 2f08                      	MOV R16, CUR_BITMASK
0002d6 ef1f                      	LDI R17, 0xFF
0002d7 2701                      	EOR R16, R17				; XOR(R16,0xFF) = NOT(R16)
0002d8 2320                      	AND R18, R16
0002d9 eaa4
0002da e0b2
0002db 932c                      	STXI cur_byte, R18
0002dc 9508                      	RET
                                 	set_bit:	
0002dd 2b28                      	OR R18, CUR_BITMASK
0002de eaa4
0002df e0b2
0002e0 932c                      	STXI cur_byte, R18
0002e1 9508                      	RET
                                 
                                 Load_pulsar:
0002e2 d03c                      	RCALL Clear_copy
0002e3 93ef                      	PUSH ZL
0002e4 93ff                      	PUSH ZH
0002e5 e0a0                      	LDI XL, low(board)
0002e6 e0b1                      	LDI XH, high(board)
0002e7 e2e8                      	LDI ZL, low(pulsar<<1)
0002e8 e0f7                      	LDI ZH, high(pulsar<<1)
                                 
                                 	pulsarcpy:
0002e9 9105                      	LPM R16, Z+
0002ea 930d                      	ST X+, R16
0002eb 3da2                      	CPI XL, low(board_eol)
0002ec f7e1                      	BRNE pulsarcpy
0002ed 30b1                      	CPI XH, high(board_eol)
0002ee f7d1                      	BRNE pulsarcpy
                                 
0002ef 91ff                      	POP ZH
0002f0 91ef                      	POP ZL
0002f1 9508                      	RET
                                 
                                 Load_gun:
0002f2 d02c                      	RCALL Clear_copy
0002f3 93ef                      	PUSH ZL
0002f4 93ff                      	PUSH ZH
0002f5 e0a0                      	LDI XL, low(board)
0002f6 e0b1                      	LDI XH, high(board)
0002f7 efea                      	LDI ZL, low(Gun<<1)
0002f8 e0f7                      	LDI ZH, high(Gun<<1)
                                 
                                 	guncpy:
0002f9 9105                      	LPM R16, Z+
0002fa 930d                      	ST X+, R16
0002fb 3da2                      	CPI XL, low(board_eol)
0002fc f7e1                      	BRNE guncpy
0002fd 30b1                      	CPI XH, high(board_eol)
0002fe f7d1                      	BRNE guncpy
                                 
0002ff 91ff                      	POP ZH
000300 91ef                      	POP ZL
000301 9508                      	RET
                                 
                                 Load_squad:
000302 d01c                      	RCALL Clear_copy
000303 93ef                      	PUSH ZL
000304 93ff                      	PUSH ZH
000305 e0a0                      	LDI XL, low(board)
000306 e0b1                      	LDI XH, high(board)
000307 e9ee                      	LDI ZL, low(Squad<<1)
000308 e0f9                      	LDI ZH, high(Squad<<1)
                                 
                                 	squadcpy:
000309 9105                      	LPM R16, Z+
00030a 930d                      	ST X+, R16
00030b 3da2                      	CPI XL, low(board_eol)
00030c f7e1                      	BRNE squadcpy
00030d 30b1                      	CPI XH, high(board_eol)
00030e f7d1                      	BRNE squadcpy
                                 
00030f 91ff                      	POP ZH
000310 91ef                      	POP ZL
000311 9508                      	RET
                                 
                                 Clear:
                                 	; Reinitialize SRAM-memory to 0 in board space
000312 e0b1                      	LDI XH, high(board)
000313 e0a0                      	LDI XL, low(board)
000314 2400                      	CLR R0
000315 920d                      	ClearLoop: ST X+,R0
000316 3da2                      	CPI XL,low(board_eol)
000317 f7e9                      	BRNE ClearLoop
000318 30b1                      	CPI XH,high(board_eol)
000319 f7d9                      	BRNE ClearLoop
                                 
00031a d004                      	RCALL Clear_copy
                                 
00031b eaa4
00031c e0b2
00031d 920c                      	STXI cur_byte,R0
                                 
00031e 9508                      	RET
                                 
                                 Clear_copy:
                                 	; Reinitialize SRAM-memory to 0 in board_copy space
00031f e0b1                      	LDI XH, high(boardcpy)
000320 eda2                      	LDI XL, low(boardcpy)
000321 2400                      	CLR R0
000322 920d                      	ClearLoop2: ST X+,R0
000323 3aa4                      	CPI XL,low(boardcpy_eol)
000324 f7e9                      	BRNE ClearLoop2
000325 30b2                      	CPI XH,high(boardcpy_eol)
000326 f7d9                      	BRNE ClearLoop2
000327 9508                      	RET
                                 .INCLUDE "ldmatrix_subroutines.inc"
                                 
                                  * ldmatrix_subroutines.inc
                                  *
                                  *  Created: 04-05-18 22:52:15
                                  *   Author: Charles
                                  */ 
                                 
                                 ; Used registers: R2,R3,R16, R17, R18, R19, R20, Y
                                 
                                 Timer0OverflowInterrupt:
000328 934f                      	PUSH R20
000329 933f                      	PUSH R19
00032a 932f                      	PUSH R18
00032b 931f                      	PUSH R17
00032c 930f                      	PUSH R16
00032d 923f                      	PUSH R3
00032e 922f                      	PUSH R2
00032f 9000 003f                 	LDS R0, SREG
000331 920f                      	PUSH R0
                                 
                                 
000332 d00d                      	RCALL Print_board				; Print one row
                                 
000333 e803                      	LDI R16,SCRSTART				; Reset timer 0 counter
000334 bd06                      	OUT TCNT0, R16
                                 
000335 900f                      	POP R0
000336 9200 003f                 	STS SREG,R0
000338 902f                      	POP R2
000339 903f                      	POP R3
00033a 910f                      	POP R16
00033b 911f                      	POP R17
00033c 912f                      	POP R18
00033d 913f                      	POP R19
00033e 914f                      	POP R20
00033f 9518                      	RETI
                                 
                                 .def COORD_X = R2
                                 Print_board:
000340 9a2c                      	SBI PORTB,4						; Trick to avoid waiting a lot for the capacitors to discharge inside the interrupt
                                 
000341 e005                      	LDI R16, MATRIX_COL/8			; Get byte count of matrix columns
000342 2e30                      	MOV R3, R16
000343 2422                      	CLR COORD_X
000344 e005                      	LDI R16,5						; 80 columns, 8 bit per data register
                                 	ColumnLoop1:					; Loading one 5 bytes row
000345 9119                      		LD R17,Y+					; Indirect load from (Y) with increment
000346 9423                      		INC COORD_X
000347 1423                      		CP COORD_X, R3				; Out-of-bounds handling
000348 f411                      		BRNE PC+3
000349 2422                      			CLR COORD_X
00034a 9622                      			ADIW Y, 2*PADDING
00034b e028                      		LDI R18,8
                                 		DataLoop1:					; Loading one byte
00034c 982b                      			CBI PORTB,3
00034d fd17                      			SBRC R17,7				; Copy data to shift register by bit check + logical shift left
00034e 9a2b                      			SBI PORTB,3
00034f 982d                      			CBI PORTB,5
000350 9a2d                      			SBI PORTB,5
000351 0f11                      			LSL R17
000352 952a                      			DEC R18
000353 f7c1                      			BRNE DataLoop1
000354 950a                      		DEC R16
000355 f779                      		BRNE ColumnLoop1
000356 96aa                      	ADIW Y,6*(5+2*PADDING)						; Line 2 to Line 8 ---> +6*(5 bytes) = 30 bytes
000357 2422                      	CLR COORD_X
000358 e005                      	LDI R16,5
                                 	ColumnLoop2:
000359 9119                      		LD R17,Y+
00035a 9423                      		INC COORD_X
00035b 1423                      		CP COORD_X, R3				; Out-of-bounds handling
00035c f411                      		BRNE PC+3
00035d 2422                      			CLR COORD_X
00035e 9622                      			ADIW Y, 2*PADDING
00035f e028                      		LDI R18,8
                                 		DataLoop2:
000360 982b                      			CBI PORTB,3
000361 fd17                      			SBRC R17,7
000362 9a2b                      			SBI PORTB,3
000363 982d                      			CBI PORTB,5
000364 9a2d                      			SBI PORTB,5
000365 0f11                      			LSL R17
000366 952a                      			DEC R18
000367 f7c1                      			BRNE DataLoop2
000368 950a                      		DEC R16
000369 f779                      		BRNE ColumnLoop2
00036a 97e1                      	SBIW Y, 7*(5+2*PADDING)						; Line 9 to Line 2 ---> -7*(5 bytes) = -35 bytes
                                 
00036b 2f15                      	MOV R17,ACTIVE_ROW						; Copy current active row in R17
00036c e028                      	LDI R18,8
                                 	RowLoop:						; Loading current row to shift register
00036d 982b                      		CBI PORTB,3
00036e fd17                      		SBRC R17,7
00036f 9a2b                      		SBI PORTB,3
000370 982d                      		CBI PORTB,5
000371 9a2d                      		SBI PORTB,5
000372 0f11                      		LSL R17
000373 952a                      		DEC R18
000374 f7c1                      		BRNE RowLoop
                                 
000375 982c                      	CBI PORTB,4
000376 9a2c                      	SBI PORTB,4						; Rising edge on PB4 copies shift register to latch
                                 
000377 e302                      	LDI R16,50						; Wait to leave a bit more time for the led capacitors to empty
                                 	WaitLoop21:						; Postwait avoids glitches when output is enabled
000378 0000                      		NOP
000379 950a                      		DEC R16
00037a f7e9                      		BRNE WaitLoop21
00037b 982c                      	CBI PORTB,4						; PB4 at 0 enable output
                                 
00037c 9556                      	LSR ACTIVE_ROW					; Shift current active row
00037d f409                      	BRNE PC+2
00037e e450                      	LDI ACTIVE_ROW,0b01000000
                                 
00037f 956a                      	DEC ROWS_REMAINING				; Size of data block is known, used to find end-of-line			
000380 f409                      	BRNE PC+2						; Check if data memory reached end of line
000381 d001                      	RCALL ResetDataAdr
000382 9508                      	RET
                                 
                                 ResetDataAdr:
                                 	; Reset the data address
000383 e031                      	LDI R19,high(board+matrix_start) 
000384 e349                      	LDI R20,low(board+matrix_start)
000385 2fd3                      	MOV YH, R19					; Program memory adress MSB
000386 2fc4                      	MOV YL, R20					; LSB
000387 e067                      	LDI ROWS_REMAINING,7
000388 9508                      	RET
                                 
                                 .undef COORD_X
                                 
                                 Load_GOL:
000389 e0a0                      	LDI XL, low(board)
00038a e0b1                      	LDI XH, high(board)
00038b ecec                      	LDI ZL, low(GOL<<1)
00038c e0f8                      	LDI ZH, high(GOL<<1)
                                 
                                 	golcpy:
00038d 9105                      	LPM R16, Z+
00038e 930d                      	ST X+, R16
00038f 3da2                      	CPI XL, low(board_eol)
000390 f7e1                      	BRNE golcpy
000391 30b1                      	CPI XH, high(board_eol)
000392 f7d1                      	BRNE golcpy
000393 9508                      	RET
                                 
                                 ;======================================================================
                                 ;							DATA
                                 ;======================================================================
                                 
000394 0000
000395 0000
000396 0000
000397 0000
000398 0000
000399 0000
00039a 0000
00039b 0000
00039c 0000
00039d 0000
00039e 0000
00039f 0000
0003a0 0000
0003a1 0000
0003a2 0000
0003a3 0000
0003a4 0000
0003a5 0000
0003a6 0000
0003a7 0000
0003a8 0000
0003a9 0000
0003aa 0000
0003ab 0000
0003ac 0000
0003ad 0000
0003ae 0000
0003af 0000
0003b0 0000
0003b1 e300
0003b2 0080
0003b3 0000
0003b4 0000
0003b5 0000
0003b6 0000
0003b7 0000
0003b8 1402
0003b9 0020
0003ba 0000
0003bb 0200
0003bc 2014
0003bd 0000
0003be 0000
0003bf 1402
0003c0 0020
0003c1 0000
0003c2 0000
0003c3 80e3
0003c4 0000
0003c5 0000
0003c6 0000
0003c7 0000
0003c8 0000
0003c9 0000
0003ca 80e3
0003cb 0000
0003cc 0000
0003cd 1402
0003ce 0020
0003cf 0000
0003d0 0200
0003d1 2014
0003d2 0000
0003d3 0000
0003d4 1402
0003d5 0020
0003d6 0000
0003d7 0000
0003d8 0000
0003d9 0000
0003da 0000
0003db e300
0003dc 0080
0003dd 0000
0003de 0000
0003df 0000
0003e0 0000
0003e1 0000
0003e2 0000
0003e3 0000
0003e4 0000
0003e5 0000
0003e6 0000
0003e7 0000
0003e8 0000
0003e9 0000
0003ea 0000
0003eb 0000
0003ec 0000
0003ed 0000
0003ee 0000
0003ef 0000
0003f0 0000
0003f1 0000
0003f2 0000
0003f3 0000
0003f4 0000
0003f5 0000
0003f6 0000
0003f7 0000
0003f8 0000
0003f9 0000
0003fa 0000
0003fb 0000
0003fc 0000                      Pulsar: .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,128,0,0,0,0,0,0,0,0,0,0,0,2,20,32,0,0,0,0,2,20,32,0,0,0,0,2,20,32,0,0,0,0,0,227,128,0,0,0,0,0,0,0,0,0,0,0,0,227,128,0,0,00003fd 0000
0003fe 0000
0003ff 0000
000400 0000
000401 0000
000402 0000
000403 0000
000404 0000
000405 0000
000406 0000
000407 0000
000408 0000
000409 0000
00040a 0000
00040b 0000
00040c 0000
00040d 0000
00040e 0000
00040f 0000
000410 0000
000411 0000
000412 0000
000413 0000
000414 0000
000415 0000
000416 0000
000417 0000
000418 0000
000419 0000
00041a 0000
00041b 0000
00041c 0000
00041d 0000
00041e 0000
00041f 0000
000420 0000
000421 0000
000422 0000
000423 0000
000424 0000
000425 c000
000426 0000
000427 0000
000428 0200
000429 0020
00042a 0000
00042b 0400
00042c 1004
00042d 0000
00042e 0000
00042f 0d05
000430 0c10
000431 0000
000432 0000
000433 10c4
000434 000c
000435 3000
000436 c200
000437 0020
000438 0000
000439 0030
00043a c0c0
00043b 0000
00043c 0000
00043d 0005
00043e 0000
00043f 0000
000440 0400
000441 0000
000442 0000
000443 0000
000444 0000
000445 0000
000446 0000
000447 0000
000448 0000
000449 0000
00044a 0000
00044b 0000
00044c 0000
00044d 0000
00044e 0000
00044f 0000
000450 0000
000451 0000
000452 0000
000453 0000
000454 0000
000455 0000
000456 0000
000457 0000
000458 0000
000459 0000
00045a 0000
00045b 0000
00045c 0000
00045d 0000
00045e 0000
00045f 0000
000460 0000
000461 0000
000462 0000
000463 0000
000464 0000
000465 0000                      ,0,2,20,32,0,0,0,0,2,20,32,0,0,0,0,2,20,32,0,0,0,0,0,0,0,0,0,0,0,0,227,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000466 0000
000467 0000
000468 0000
000469 0000
00046a 0000
00046b 0000
00046c 0000
00046d 0000
00046e 0000
00046f 0000
000470 0000
000471 0000
000472 0000
000473 0000
000474 0000
000475 0000
000476 0000
000477 0000
000478 0000
000479 0000
00047a 0000
00047b 0000
00047c 0000
00047d 0000
00047e 0000
00047f 0000
000480 0000
000481 0000
000482 0000
000483 0000
000484 0000
000485 0000
000486 2f3c
000487 01be
000488 007c
000489 0400
00048a 0222
00048b 4401
00048c 0000
00048d e21c
00048e 0702
00048f 0044
000490 0400
000491 0222
000492 4401
000493 0000
000494 ef3d
000495 0f82
000496 007c
000497 0000
000498 0000
000499 0000
00049a 0000
00049b 0000
00049c 0000
00049d 0000
00049e 0000
00049f f501
0004a0 7c51
0004a1 0000
0004a2 0000
0004a3 5115
0004a4 0044
0004a5 0000
0004a6 7500
0004a7 745f
0004a8 0000
0004a9 0000
0004aa 5115
0004ab 0004
0004ac 0000
0004ad f701
0004ae 7cdf
0004af 0000
0004b0 0000
0004b1 0000
0004b2 0000
0004b3 0000
0004b4 0000
0004b5 0000
0004b6 0000
0004b7 0000
0004b8 0000
0004b9 0000
0004ba 0000
0004bb 0000
0004bc 0000
0004bd 0000
0004be 0000
0004bf 0000
0004c0 0000
0004c1 0000
0004c2 0000
0004c3 0000
0004c4 0000
0004c5 0000
0004c6 0000
0004c7 0000
0004c8 0000
0004c9 0000
0004ca 0000
0004cb 0000
0004cc 0000
0004cd 0000
0004ce 0000                      Gun: .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,2,32,0,0,0,0,4,4,16,0,0,0,0,5,13,16,12,0,0,0,0,196,16,12,0,0,48,0,194,0004cf 0000
0004d0 0000
0004d1 0000
0004d2 0000
0004d3 0000
0004d4 0000
0004d5 0000
0004d6 0000
0004d7 0000
0004d8 0000
0004d9 0000
0004da 0000
0004db 0000
0004dc 0000
0004dd 0000
0004de 0000
0004df 0000
0004e0 0000
0004e1 0000
0004e2 0000
0004e3 0000
0004e4 0000
0004e5 0000
0004e6 0000
0004e7 0000
0004e8 0000
0004e9 0000
0004ea 0000
0004eb 0000
0004ec 0000
0004ed 0000
0004ee 0000
0004ef 0000
0004f0 0000
0004f1 0000
0004f2 0000
0004f3 0000
0004f4 0000
0004f5 0000
0004f6 0000
0004f7 0000
0004f8 0000
0004f9 0000
0004fa 0000
0004fb 0000
0004fc 0000
0004fd 0000
0004fe 0000
0004ff 0000
000500 0000
000501 0000
000502 0000
000503 0000
000504 0e00
000505 e338
000506 008e
000507 0000
000508 2008
000509 0882
00050a 0000
00050b 0400
00050c 4110
00050d 0004
00050e 0000
00050f 0000
000510 0000
000511 0000
000512 0000
000513 0000
000514 0000
000515 0000
000516 380e
000517 8ee3
000518 0000
000519 0800
00051a 8220
00051b 0008
00051c 0000
00051d 1004
00051e 0441
00051f 0000
000520 0000
000521 0000
000522 0000
000523 0000
000524 0000
000525 0000
000526 0000
000527 0e00
000528 e338
000529 008e
00052a 0000
00052b 2008
00052c 0882
00052d 0000
00052e 0400
00052f 4110
000530 0004
000531 0000
000532 0000
000533 0000
000534 0000
000535 0000
000536 0000
000537 0000                      32,0,0,0,48,0,192,192,0,0,0,0,5,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  : 101 y  :   7 z  :   9 r0 :  32 r1 :   0 r2 :  22 r3 :  15 r4 :  17 
r5 :   4 r6 :   4 r7 :   8 r8 :   8 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 159 r17:  79 r18:  42 r19:  19 r20:   4 
r21:   4 r22:   3 r23:  23 r24:  14 r25:  19 r26:  78 r27:  68 r28:   2 
r29:   2 r30:  27 r31:  25 
Registers used: 27 out of 35 (77.1%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   4 add   :  14 adiw  :  14 and   :  12 
andi  :   6 asr   :   0 bclr  :   1 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   1 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  60 brpl  :   9 brsh  :   0 brtc  :   0 brts  :   2 brvc  :   0 
brvs  :   0 bset  :   2 bst   :   2 call  :   0 cbi   :  20 cbr   :   2 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  22 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :  29 cpse  :   0 dec   :  14 eor   :   3 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :  22 jmp   :   0 
ld    :  41 ldd   :   0 ldi   : 157 lds   :   3 lpm   :   4 lsl   :   8 
lsr   :   6 mov   :  59 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  14 or    :   9 ori   :   0 out   :   4 pop   :  31 
push  :  31 rcall :  35 ret   :  60 reti  :   2 rjmp  :  12 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  34 sbic  :   0 sbis  :  16 
sbiw  :  12 sbr   :  10 sbrc  :   4 sbrs  :   6 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  46 std   :   0 sts   :  11 
sub   :   0 subi  :  12 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 47 out of 113 (41.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a70   1772    840   2612   32768   8.0%
[.dseg] 0x000100 0x0002a7      0    423    423    2048  20.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
